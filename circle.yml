general:
  branches:
    ignore:
      - gh-pages # list of branches to ignore

machine:
  services:
    - docker
  hosts:
    typo3-app: 127.0.0.1
    flow: 127.0.0.1
    neos: 127.0.0.1

dependencies:
  cache_directories:
    - "~/docker"
  
  pre:
    - docker info && docker version
    # Cache some Docker images to make builds faster
    - mkdir -p ~/docker/million12
    # Cache million12/mariadb
    - if [[ -e ~/docker/million12/mariadb.tar ]]; then docker load -i ~/docker/million12/mariadb.tar; else docker pull million12/mariadb:latest && docker save million12/mariadb > ~/docker/million12/mariadb.tar; fi
    # Cache million12/php-app - base for million12/typo3-flow-neos-abstract and million12/behat-selenium
    - if [[ -e ~/docker/million12/php-app.tar ]]; then docker load -i ~/docker/million12/php-app.tar; else docker pull million12/php-app:latest && docker save million12/php-app > ~/docker/million12/php-app.tar; fi

  override:
    - docker pull million12/mariadb:latest
    - docker pull million12/php-app:latest
#    - docker pull million12/behat-selenium:latest
    
  post:
    # Launch DB backend
    - docker run -d --name=db -v /var/log --env="MARIADB_PASS=my-pass" million12/mariadb
    - docker logs -f db | tee -a ${CIRCLE_ARTIFACTS}/docker-db.log:
        background: true
    # Build abstract million12/typo3-flow-neos-abstract image
    - docker build -t million12/typo3-flow-neos-abstract .

# Run tests
test:
  pre:
    - docker logs db && docker inspect db # Temporary - to investigate some random issues with this container...
    - docker ps
    
  override:
    # ##################################################
    # Build TYPO3 Flow container and do some basic tests
    # ##################################################
    - docker build --tag=test/typo3-flow Tests/Flow/
    # Launch it with default ENV variables
    - docker run -d --name=flow -p=8000:80 --link=db:db --env="T3APP_NAME=flow" test/typo3-flow
    - docker logs -f flow > ${CIRCLE_ARTIFACTS}/docker-flow.log:
        background: true
    # Wait till TYPO3 Flow is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://flow:8000 && curl -s -L http://flow:8000
    - curl -s -L --head http://flow:8000 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8000 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8000 | grep "/flow/welcome"
    - curl -s -L http://flow:8000 | grep "Kickstart your first package"
    # Run all Flow tests (unit, functional)
    # Note: we do not need Selenium container here as Flow doesn't have Behat tests. 
    # Therefore we use million12/php-app container, which is also the base image for our project.
    - |
      docker run -ti --volumes-from=flow --link=flow:web --link=db:db million12/php-app "
        su www -c \"
          cd ~/flow; \
          echo -e '\n\n======== RUNNING TYPO3 FLOW TESTS =======\n\n'; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/UnitTests.xml; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml
        \"
      "
    # Clean up
    - docker rm -f flow || true
    
    
    # ##################################################
    # Build TYPO3 Neos container and do some basic tests
    # ##################################################
    - docker build --tag=test/typo3-neos Tests/Neos/
    # Launch it with default ENV variables
    - docker run -d --name=neos -p=8100:80 --link=db:db --env="T3APP_NAME=neos" test/typo3-neos
    - docker logs -f neos > ${CIRCLE_ARTIFACTS}/docker-neos.log:
        background: true
    # Wait till TYPO3 Neos is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-neos.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests 
    - curl -L --head http://neos:8100 && curl -s -L http://neos:8100
    - curl -s --head http://neos:8100 | grep "HTTP/1.1 200 OK" && curl -s --head http://neos:8100 | grep "X-Flow-Powered"
    - curl -s http://neos:8100 | grep "Power when you need it" && curl -s http://neos:8100 | grep "Powered by TYPO3 Neos"
    - curl -s -L http://neos:8100/neos | grep "TYPO3 Neos Login"
    # Test: check if Neos is installed in $T3APP_NAME directory
    - docker run -ti --volumes-from=neos million12/php-app "su www -c \"cd && ls -al neos\""
    # Clean up
    - docker rm -f neos || true
    
    
    # ###################################################################
    # Launch Neos container again, but do only initialisation for testing
    # ###################################################################
    - docker run -d --name=neos-testing -p=8200:80 --link=db:db --env="T3APP_DO_INIT_TESTS=true" --env="T3APP_VHOST_NAMES=neos dev.neos behat.dev.neos" test/typo3-neos
    - docker logs -f neos-testing > ${CIRCLE_ARTIFACTS}/docker-neos-testing.log:
        background: true
    # Wait till TYPO3 Neos is fully configured
    - while true; do if grep "nginx entered RUNNING state" -a ${CIRCLE_ARTIFACTS}/docker-neos-testing.log; then break; else sleep 1; fi done
    - curl -L --head http://neos:8200 && curl -s -L http://neos:8200
    
    # Run all Neos tests (unit, functional, behat), but do not fail the build in case of 
    # any problems there. These are vendor tests and errors there 
    # do not indicate that this Docker image is faulty.
    - |
      docker run -ti --volumes-from=neos-testing --link=neos-testing:web --link=db:db million12/behat-selenium "
        env && \
        echo \$WEB_PORT_80_TCP_ADDR \$WEB_ENV_T3APP_VHOST_NAMES >> /etc/hosts && cat /etc/hosts && \
        su www -c \"
          cd ~/typo3-app; \
          echo -e '\n\n======== RUNNING TYPO3 NEOS TESTS =======\n\n'; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/UnitTests.xml; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml; \
          bin/behat -c Packages/Application/TYPO3.Neos/Tests/Behavior/behat.yml
        \"
      " || true
    
    # Clean up
    - docker rm -f neos-testing || true


    # ##################################################
    # Test case:
    # - run two Flow projects sharing the same data container
    # - as a result, when 2nd container is launched it will contain two configured vhost,
    #   for both projects.
    # We do that to make sure that these 2 different projects, in a separate directories 
    # and with separete db work together correctly (i.e. Nginx starts with these 2 vhosts etc).
    # ##################################################
    - docker run -d -v /data --name=flow-multi-data busybox:latest

    - docker run -d --name=flow-multi-1 -p=8001:80 --link=db:db --volumes-from=flow-multi-data --env="T3APP_NAME=typo3-app" test/typo3-flow
    - docker logs -f flow-multi-1 > ${CIRCLE_ARTIFACTS}/docker-flow-muilti-1.log 2>&1:
        background: true
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-muilti-1.log; then break; else sleep 1; fi done

    - docker run -d --name=flow-multi-2 -p=8002:80 --link=db:db --volumes-from=flow-multi-data --env="T3APP_NAME=flow" test/typo3-flow
    - docker logs -f flow-multi-2 > ${CIRCLE_ARTIFACTS}/docker-flow-muilti-2.log 2>&1:
        background: true
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-muilti-2.log; then break; else sleep 1; fi done
    
    # make some hardcoded change in a demo package, so we can test against it
    # We replace 'Kickstart' word with 'Bootstrap' in the welcome screen
    - |
      docker run -it --volumes-from=flow-multi-data million12/php-app "su www -c \"
        cd ~/flow; \
        sed -i -r "s#Kickstart#Bootstrap#g" Packages/Framework/TYPO3.Welcome/Resources/Private/Templates/Standard/Index.html; \
        FLOW_CONTEXT=Production ./flow flow:cache:flush && ./flow cache:warmup
      \""
    
    # Test: do basic front-end tests against the 2nd container
    - curl -L --head http://typo3-app:8002 && curl -s -L http://typo3-app:8002 # just to see the output
    - curl -L --head http://flow:8002 && curl -s -L http://flow:8002 # just to see the output
    
    - curl -s -L --head http://typo3-app:8002 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://typo3-app:8002 | grep "X-Flow-Powered" && curl -s -L --head http://typo3-app:8002 | grep "/flow/welcome"
    - curl -s -L --head http://flow:8002 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8002 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8002 | grep "/flow/welcome"
    
    - curl -s -L http://typo3-app:8002 | grep "Kickstart your first package"
    - curl -s -L http://flow:8002 | grep "Bootstrap your first package"
